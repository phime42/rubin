var search_data = {"index":{"searchIndex":["cryptobox","databasebox","encryptedadapter","rbnacl","relaychat","starter","check_for_revocation()","encrypt_string()","generate_keypair()","host_encrypt_string()","new()","new()","new()","new()","new()","output_all_clients()","output_all_keys()","output_all_message_ids_by_key_id()","output_host_keypair()","output_message_by_days()","output_new_message_ids()","read_messages_by_id()","register_key()","register_new_client()","revoke_key()","write_encrypted_message()","write_message_to_database()","gemfile","gemfile.lock","readme","created.rid"],"longSearchIndex":["cryptobox","databasebox","encryptedadapter","rbnacl","relaychat","starter","databasebox#check_for_revocation()","cryptobox#encrypt_string()","cryptobox#generate_keypair()","cryptobox#host_encrypt_string()","cryptobox::new()","databasebox::new()","encryptedadapter::new()","relaychat::new()","starter::new()","databasebox#output_all_clients()","databasebox#output_all_keys()","databasebox#output_all_message_ids_by_key_id()","databasebox#output_host_keypair()","databasebox#output_message_by_days()","databasebox#output_new_message_ids()","databasebox#read_messages_by_id()","databasebox#register_key()","databasebox#register_new_client()","databasebox#revoke_key()","encryptedadapter#write_encrypted_message()","databasebox#write_message_to_database()","","","",""],"info":[["CryptoBox","","CryptoBox.html","","<p>The class CryptoBox poses as a generic adapter for cryptographic services.\nIt uses the NaCl library by …\n"],["DatabaseBox","","DatabaseBox.html","",""],["EncryptedAdapter","","EncryptedAdapter.html","",""],["RbNaCl","","RbNaCl.html","",""],["RelayChat","","RelayChat.html","",""],["Starter","","Starter.html","","<p>manages the startup of all bots and clients\n"],["check_for_revocation","DatabaseBox","DatabaseBox.html#method-i-check_for_revocation","(key_id)",""],["encrypt_string","CryptoBox","CryptoBox.html#method-i-encrypt_string","(string_to_encrypt, sender_private_key, receiver_public_key)","<p>Encrypts a given string with the given receiver public key and signs the\nmessage with a given private …\n"],["generate_keypair","CryptoBox","CryptoBox.html#method-i-generate_keypair","()","<p>Generates a new NaCl keypair also sets the @public_key and @private_key\ninstance variables Due to the …\n"],["host_encrypt_string","CryptoBox","CryptoBox.html#method-i-host_encrypt_string","(string_to_encrypt, receiver_public_key)","<p>Encrypts a given string with the given pubkey, signed with the host keypair\n"],["new","CryptoBox","CryptoBox.html#method-c-new","()",""],["new","DatabaseBox","DatabaseBox.html#method-c-new","()",""],["new","EncryptedAdapter","EncryptedAdapter.html#method-c-new","()",""],["new","RelayChat","RelayChat.html#method-c-new","()",""],["new","Starter","Starter.html#method-c-new","()",""],["output_all_clients","DatabaseBox","DatabaseBox.html#method-i-output_all_clients","()","<p>reads the client table and outputs all clients as an array\n"],["output_all_keys","DatabaseBox","DatabaseBox.html#method-i-output_all_keys","()",""],["output_all_message_ids_by_key_id","DatabaseBox","DatabaseBox.html#method-i-output_all_message_ids_by_key_id","(key_id)",""],["output_host_keypair","DatabaseBox","DatabaseBox.html#method-i-output_host_keypair","()",""],["output_message_by_days","DatabaseBox","DatabaseBox.html#method-i-output_message_by_days","(key_id, days)",""],["output_new_message_ids","DatabaseBox","DatabaseBox.html#method-i-output_new_message_ids","(key_id, message_id)",""],["read_messages_by_id","DatabaseBox","DatabaseBox.html#method-i-read_messages_by_id","(message_id, key_id)","<p>searches for the message with id = message_id and key_id = key_id\n"],["register_key","DatabaseBox","DatabaseBox.html#method-i-register_key","(description, host, private_key, public_key)",""],["register_new_client","DatabaseBox","DatabaseBox.html#method-i-register_new_client","(description, host, type, nick, realname, channel)",""],["revoke_key","DatabaseBox","DatabaseBox.html#method-i-revoke_key","(public_key, key_id)",""],["write_encrypted_message","EncryptedAdapter","EncryptedAdapter.html#method-i-write_encrypted_message","(timestamp, client, private_bool, sender, message, attachment)",""],["write_message_to_database","DatabaseBox","DatabaseBox.html#method-i-write_message_to_database","(timestamp, client, private, sender, message, attachment, key_id)","<p>write the message from the client application to the database\n"],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org&#39; gem &#39;rbnacl-libsodium&#39; gem\n&#39;sequel&#39; gem &#39;sqlite3&#39; …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  ffi (1.9.8)\n  irc-socket (1.0.1)\n  rbnacl (3.1.2)\n    ffi\n ...</pre>\n"],["README","","README_md.html","","<p>rubin\n<p>{Build Status]\n{Code Climate]\n{Dependency Status\nAn IRC/E-Mail/XMPP\ncollector backend written in ...\n"],["created.rid","","doc/created_rid.html","",""]]}}